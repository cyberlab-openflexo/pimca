
/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/pimca/PimCA.fml/PimCAModel.fml")
public class PimCAModel {

  @GetSetProperty(value="machineries", access=get)  
  public List<FlexoConceptInstanceType<Machinery>> getMachineries {  
    return this.SelectFlexoConceptInstance(type=Machinery);  
  }
  @GetSetProperty(value="resources", access=get)  
  public List<FlexoConceptInstanceType<Resource>> getResources {  
    return this.SelectFlexoConceptInstance(type=Resource);  
  }

  @CreationScheme  
  PimCAModel:create() {  
  
  }  


  @FlexoConcept  
  public class Machinery extends PieceOfKnowledge  {  
  
    public MachineryType kind;  
  
    @CreationScheme    
    Machinery:create(String name, FlexoEnumType<MachineryType> kind) {    
      name = parameters.name;      
      kind = parameters.kind;      
      container.firePropertyChange machineries    
    }    
  
    @DeletionScheme    
    Void delete() {    
      VirtualModelInstanceType<PimCAModel> containerModel = container;      
      for (relation : relations) {      
        relation.delete();      
      }      
      delete this;      
      fireEvent DeletedMachinery      
      containerModel.firePropertyChange machineries    
    }    
  
  }  

  @FlexoConcept  
  public class QualifiedElement {  
  
    public String name;  
    public String usageArea;  
    public Date usagePeriod;  
    public String usageLevel;  
    public int validity;  
    public String comment;  
  }  

  @FlexoConcept  
  public class PieceOfKnowledge extends QualifiedElement  {  
  
    public int nbCopy;  
    public String role;  
    @GetSetProperty(value="relations", access=get)    
    public List<FlexoConceptInstanceType<Relation>> getRelations {    
      return container.SelectFlexoConceptInstance(type=Relation,where=where=((selected.source = this) | (selected.target = this)));    
    }  
  }  

  @FlexoConcept  
  public class MachineryType {  
  }  

  @FlexoConcept  
  public class NetworkType {  
  }  

  @FlexoConcept  
  public class Customs extends Machinery  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Customs:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange machineries      
      fireEvent NewMachinery    
    }    
  
  }  

  @FlexoConcept  
  public class Network extends Machinery  {  
  
    public NetworkType networkType;  
  
    @CreationScheme    
    Network:create(String name, FlexoEnumType<NetworkType> aNetworkType) {    
      name = parameters.name;      
      networkType = parameters.aNetworkType;      
      container.firePropertyChange machineries      
      fireEvent NewMachinery    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Interface extends Machinery  {  
  
    @CreationScheme    
    Interface:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange machineries      
      fireEvent NewMachinery    
    }    
  
  }  

  @FlexoConcept  
  public class Performer extends Machinery  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Performer:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange machineries      
      fireEvent NewMachinery    
    }    
  
  }  

  @FlexoConcept  
  public class Attacker extends Performer  {  
  
    @CreationScheme    
    Attacker:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange machineries      
      fireEvent NewMachinery    
    }    
  
  }  

  @FlexoConcept  
  public class Relation extends PieceOfKnowledge  {  
  
    public String multiplex;  
    public String comSec;  
    public String protocol;  
    public PieceOfKnowledge source;  
    public PieceOfKnowledge target;  
  
    @ActionScheme    
    Void init(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      source = parameters.source;      
      target = parameters.target;      
      source.firePropertyChange relations      
      target.firePropertyChange relations    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Use extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Use:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Control extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Control:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Maintain extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Maintain:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Swap extends Relation  {  
  
    @CreationScheme    
    Swap:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Check extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Check:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Produce extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Produce:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Resource extends PieceOfKnowledge  {  
  
    @GetSetProperty(value="relations", access=get)    
    public List<FlexoConceptInstanceType<Relation>> getRelations {    
      return container.SelectFlexoConceptInstance(type=Relation,where=where=(selected.source = this));    
    }  
  
    @CreationScheme    
    Resource:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class BasicResource extends Resource  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    BasicResource:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange resources    
    }    
  
  }  

  @FlexoConcept  
  public class Instructions extends Resource  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Instructions:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange resources    
    }    
  
  }  

  @FlexoConcept  
  public class Passeport extends Resource  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Passeport:create(String name) {    
      name = parameters.name;      
      container.firePropertyChange resources    
    }    
  
  }  

  @FlexoConcept  
  public class BasicMachinery extends Machinery  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    BasicMachinery:create(String name, FlexoEnumType<MachineryType> kind) {    
      name = parameters.name;      
      kind = parameters.kind;      
      container.firePropertyChange machineries      
      fireEvent NewMachinery    
    }    
  
  }  

  @FlexoConcept  
  public class NewMachinery {  
  
    public FlexoConceptInstance machinery;  
  
    @CreationScheme    
    NewMachinery:create(UndefinedFlexoConceptInstanceType aMachinery) {    
      machinery = parameters.aMachinery;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class DeletedMachinery {  
  
    public FlexoConceptInstance machinery;  
  
    @CreationScheme    
    DeletedMachinery:create(UndefinedFlexoConceptInstanceType aMachinery) {    
      machinery = parameters.aMachinery;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
