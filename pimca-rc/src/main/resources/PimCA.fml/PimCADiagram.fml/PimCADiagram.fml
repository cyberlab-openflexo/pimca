use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * FML-controlled diagram representing a PimCA model
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/pimca/PimCA.fml/PimCADiagram.fml")
public class PimCADiagram {

  public Diagram diagram;
  public PimCAModel model;
  public String diagramTitle;
  public String diagramDescription;

  @CreationScheme  
  PimCADiagram:init(String diagramName, String diagramTitle, VirtualModelInstanceType<PimCAModel> model) {  
    diagram = CreateDiagram();    
    model = parameters.model;    
    diagramTitle = parameters.diagramTitle;  
  }  

  @ActionScheme  
  Void representRequiredRelationships() {  
    for (elementGR : this.SelectFlexoConceptInstance(type=ElementGR)) {    
      for (relation : model.SelectFlexoConceptInstance(type=Relation,where=where=(selected.source = elementGR.pieceOfKnowledge))) {      
        log (("Dois je representer la relation " + relation) + " ?")        
        FlexoConceptInstanceType<ElementGR> targetGR = this.SelectUniqueFlexoConceptInstance(type=ElementGR,where=where=(selected.pieceOfKnowledge = relation.target));        
        if (targetGR != null) {        
          log "Oui on doit le voir"          
          FlexoConceptInstanceType<RelationGR> relationGR = this.SelectUniqueFlexoConceptInstance(type=RelationGR,where=where=(selected.relation = relation));          
          if (relationGR = null) {          
            log "Faut creer le lien graphique"            
            this.makeRelationGR(relation,elementGR,targetGR)          
          }        
        }      
      }    
    }  
  }  

  @ActionScheme  
  Void makeRelationGR(FlexoConceptInstanceType<Relation> relation, FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR) {  
    if parameters.relation.concept.name.equals("Swap") {    
      return SwapGR.representSwap(parameters.sourceElementGR,parameters.targetElementGR,parameters.relation);    
    }    
    if parameters.relation.concept.name.equals("Check") {    
      return CheckGR.representCheck(parameters.sourceElementGR,parameters.targetElementGR,parameters.relation);    
    }    
    if parameters.relation.concept.name.equals("Control") {    
      return ControlGR.representControl(parameters.sourceElementGR,parameters.targetElementGR,parameters.relation);    
    }    
    if parameters.relation.concept.name.equals("Use") {    
      return UseGR.representUse(parameters.sourceElementGR,parameters.targetElementGR,parameters.relation);    
    }    
    if parameters.relation.concept.name.equals("Produce") {    
      return ProduceGR.representProduce(parameters.sourceElementGR,parameters.targetElementGR,parameters.relation);    
    }    
    if parameters.relation.concept.name.equals("Maintain") {    
      return MaintainGR.representMaintain(parameters.sourceElementGR,parameters.targetElementGR,parameters.relation);    
    }  
  }  


  @FlexoConcept  
  public class BasicMachineryGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Machinery machinery;  
  
    @DropScheme    
    BasicMachineryGR:dropBasicMachineryGRAtTopLevel(String name, FlexoEnumType<MachineryType> kind) {    
      shape = diagram.AddShape();      
      machinery = BasicMachinery.create("Machinery",null);    
    }    
  
    @DropScheme    
    BasicMachineryGR:representBasicMachinery(FlexoConceptInstanceType<BasicMachinery> basicMachinery) {    
      shape = diagram.AddShape();      
      machinery = parameters.basicMachinery;      
      container.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class PerformerGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Performer machinery;  
  
    @DropScheme    
    PerformerGR:dropPerformerGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      machinery = Performer.create(parameters.name);    
    }    
  
    @DropScheme    
    PerformerGR:representPerformer(FlexoConceptInstanceType<Performer> performer) {    
      shape = diagram.AddShape();      
      machinery = parameters.performer;      
      container.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class NetworkGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public DiagramShape icon;  
    public Network machinery;  
    public DiagramShape label;  
  
    @DropScheme    
    NetworkGR:dropNetworkGRAtTopLevel(String name, FlexoEnumType<NetworkType> networkType) {    
      shape = diagram.AddShape();      
      icon = diagram.AddShape();      
      label = diagram.AddShape();      
      machinery = Network.create(parameters.name,parameters.networkType);    
    }    
  
    @DropScheme    
    NetworkGR:representNetwork(FlexoConceptInstanceType<Network> network) {    
      shape = diagram.AddShape();      
      machinery = parameters.network;      
      container.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class InterfaceGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public DiagramShape icon;  
    public DiagramShape text;  
    public Interface machinery;  
  
    @DropScheme    
    InterfaceGR:dropInterfaceGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      icon = diagram.AddShape();      
      text = diagram.AddShape();      
      machinery = Interface.create(parameters.name);    
    }    
  
    @DropScheme    
    InterfaceGR:representInterface(FlexoConceptInstanceType<Interface> interface) {    
      shape = diagram.AddShape();      
      machinery = parameters.interface;      
      container.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class CustomsGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Customs machinery;  
  
    @DropScheme    
    CustomsGR:dropCustomsGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      machinery = Customs.create(parameters.name);    
    }    
  
    @DropScheme    
    CustomsGR:representCustoms(FlexoConceptInstanceType<Customs> customs) {    
      shape = diagram.AddShape();      
      machinery = parameters.customs;      
      container.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class AttackerGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Attacker machinery;  
  
    @DropScheme    
    AttackerGR:dropAttackerGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      machinery = Attacker.create(parameters.name);    
    }    
  
    @DropScheme    
    AttackerGR:representAttacker(FlexoConceptInstanceType<Attacker> attacker) {    
      shape = diagram.AddShape();      
      machinery = parameters.attacker;      
      container.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class MachineryGR extends ElementGR  {  
  
      
    abstract FlexoConceptInstanceType<Machinery> machinery;  
      
    abstract DiagramShape shape;  
      
    public FlexoConceptInstanceType<Machinery> pieceOfKnowledge = machinery;  
  
    @DeletionScheme    
    public Void delete() {    
      machinery.delete();      
      delete shape;    
    }    
  
    @DeletionScheme    
    public Void removeFromDiagram() {    
      delete shape;      
      VirtualModelInstanceType<PimCADiagram> pimCADiagram = container;      
      delete this;      
      pimCADiagram.representRequiredRelationships()    
    }    
  
  }  

  @FlexoConcept  
  public class SwapGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Swap relation;  
  
    @LinkScheme    
    SwapGR:createSwapGR() {    
      connector = diagram.AddConnector();      
      this.init(fromTarget,toTarget)      
      relation = Swap.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
    @CreationScheme    
    SwapGR:representSwap(FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR, FlexoConceptInstanceType<Swap> relation) {    
      connector = diagram.AddConnector();      
      this.init(parameters.sourceElementGR,parameters.targetElementGR)      
      relation = parameters.relation;    
    }    
  
  }  

  @FlexoConcept  
  public class RelationGR {  
  
      
    abstract DiagramConnector connector;  
    public ElementGR sourceGR;  
    public ElementGR targetGR;  
      
    abstract FlexoConceptInstanceType<Relation> relation;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Void init(FlexoConceptInstanceType<ElementGR> sourceGR, FlexoConceptInstanceType<ElementGR> targetGR) {    
      sourceGR = parameters.sourceGR;      
      targetGR = parameters.targetGR;    
    }    
  
  }  

  @FlexoConcept  
  public class CheckGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Check relation;  
  
    @LinkScheme    
    CheckGR:createCheckGR() {    
      connector = diagram.AddConnector();      
      this.init(fromTarget,toTarget)      
      relation = Check.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
    @CreationScheme    
    CheckGR:representCheck(FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR, FlexoConceptInstanceType<Check> relation) {    
      connector = diagram.AddConnector();      
      this.init(parameters.sourceElementGR,parameters.targetElementGR)      
      relation = parameters.relation;    
    }    
  
  }  

  @FlexoConcept  
  public class ControlGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Control relation;  
  
    @LinkScheme    
    ControlGR:createControlGR() {    
      connector = diagram.AddConnector();      
      this.init(fromTarget,toTarget)      
      relation = Control.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
    @CreationScheme    
    ControlGR:representControl(FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR, FlexoConceptInstanceType<Control> relation) {    
      connector = diagram.AddConnector();      
      this.init(parameters.sourceElementGR,parameters.targetElementGR)      
      relation = parameters.relation;    
    }    
  
  }  

  @FlexoConcept  
  public class UseGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Use relation;  
  
    @LinkScheme    
    UseGR:createUseGR() {    
      connector = diagram.AddConnector();      
      this.init(fromTarget,toTarget)      
      relation = Use.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
    @CreationScheme    
    UseGR:representUse(FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR, FlexoConceptInstanceType<Use> relation) {    
      connector = diagram.AddConnector();      
      this.init(parameters.sourceElementGR,parameters.targetElementGR)      
      relation = parameters.relation;    
    }    
  
  }  

  @FlexoConcept  
  public class ProduceGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Produce relation;  
  
    @LinkScheme    
    ProduceGR:createProduceGR() {    
      connector = diagram.AddConnector();      
      this.init(fromTarget,toTarget)      
      relation = Produce.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
    @CreationScheme    
    ProduceGR:representProduce(FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR, FlexoConceptInstanceType<Produce> relation) {    
      connector = diagram.AddConnector();      
      this.init(parameters.sourceElementGR,parameters.targetElementGR)      
      relation = parameters.relation;    
    }    
  
  }  

  @FlexoConcept  
  public class MaintainGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Maintain relation;  
  
    @LinkScheme    
    MaintainGR:createMaintainGR() {    
      connector = diagram.AddConnector();      
      this.init(fromTarget,toTarget)      
      relation = Maintain.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
    @CreationScheme    
    MaintainGR:representMaintain(FlexoConceptInstanceType<ElementGR> sourceElementGR, FlexoConceptInstanceType<ElementGR> targetElementGR, FlexoConceptInstanceType<Maintain> relation) {    
      connector = diagram.AddConnector();      
      this.init(parameters.sourceElementGR,parameters.targetElementGR)      
      relation = parameters.relation;    
    }    
  
  }  

  @FlexoConcept  
  public class BasicResourceGR extends ResourceGR  {  
  
    public DiagramShape shape;  
    public BasicResource resource;  
  
    @DropScheme    
    BasicResourceGR:dropBasicResourceGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      resource = BasicResource.create(parameters.name);    
    }    
  
    @DropScheme    
    BasicResourceGR:representBasicResource(FlexoConceptInstanceType<BasicResource> basicResource) {    
      shape = diagram.AddShape();      
      resource = parameters.basicResource;    
    }    
  
  }  

  @FlexoConcept  
  public class InstructionsGR extends ResourceGR  {  
  
    public DiagramShape shape;  
    public Instructions resource;  
  
    @DropScheme    
    InstructionsGR:dropInstructionsGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      resource = Instructions.create(parameters.name);    
    }    
  
    @DropScheme    
    InstructionsGR:representInstructions(FlexoConceptInstanceType<Instructions> instructions) {    
      shape = diagram.AddShape();      
      resource = parameters.instructions;    
    }    
  
  }  

  @FlexoConcept  
  public class PassportGR extends ResourceGR  {  
  
    public DiagramShape shape;  
    public Passeport resource;  
  
    @DropScheme    
    PassportGR:dropPassportGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      resource = Passeport.create(parameters.name);    
    }    
  
    @DropScheme    
    PassportGR:representPasseport(FlexoConceptInstanceType<Passeport> passeport) {    
      shape = diagram.AddShape();      
      resource = parameters.passeport;    
    }    
  
  }  

  @FlexoConcept  
  public class ResourceGR extends ElementGR  {  
  
      
    abstract FlexoConceptInstanceType<Resource> resource;  
      
    abstract DiagramShape shape;  
      
    public FlexoConceptInstanceType<Resource> pieceOfKnowledge = resource;  
  }  

  @FlexoConcept  
  public class ElementGR {  
  
      
    abstract FlexoConceptInstanceType<PieceOfKnowledge> pieceOfKnowledge;  
      
    abstract DiagramShape shape;  
  }  

}
