
/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/pimca/PimCA.fml/PimCAModel.fml")
public class PimCAModel {

  @FlexoConcept  
  public class Machinery extends PieceOfKnowledge  {  
  
    public MachineryType kind;  
  
    @CreationScheme    
    Machinery:create(String name, FlexoEnumType<MachineryType> kind) {    
      name = parameters.name;      
      kind = parameters.kind;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class QualifiedElement {  
  
    public String name;  
    public String usageArea;  
    public Date usagePeriod;  
    public String usageLevel;  
    public int validity;  
    public String comment;  
  }  

  @FlexoConcept  
  public class PieceOfKnowledge extends QualifiedElement  {  
  
    public int nbCopy;  
    public String role;  
  }  

  @FlexoConcept  
  public class MachineryType {  
  }  

  @FlexoConcept  
  public class NetworkType {  
  }  

  @FlexoConcept  
  public class Customs extends Machinery  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Customs:create(String name) {    
      name = parameters.name;    
    }    
  
  }  

  @FlexoConcept  
  public class Network extends Machinery  {  
  
    public NetworkType networkType;  
  
    @CreationScheme    
    Network:create(String name, FlexoEnumType<NetworkType> aNetworkType) {    
      name = parameters.name;      
      networkType = parameters.aNetworkType;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Interface extends Machinery  {  
  
    @CreationScheme    
    Interface:create(String name) {    
      name = parameters.name;    
    }    
  
  }  

  @FlexoConcept  
  public class Performer extends Machinery  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Performer:create(String name) {    
      name = parameters.name;    
    }    
  
  }  

  @FlexoConcept  
  public class Attacker extends Performer  {  
  
    @CreationScheme    
    Attacker:create(String name) {    
      name = parameters.name;    
    }    
  
  }  

  @FlexoConcept  
  public class Relation extends PieceOfKnowledge  {  
  
    public String multiplex;  
    public String comSec;  
    public String protocol;  
    public PieceOfKnowledge source;  
    public PieceOfKnowledge target;  
  
    @ActionScheme    
    Void init(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      source = parameters.source;      
      target = parameters.target;    
    }    
  
  }  

  @FlexoConcept  
  public class Use extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Use:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Control extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Control:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Maintain extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Maintain:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Swap extends Relation  {  
  
    @CreationScheme    
    Swap:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Check extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Check:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

  @FlexoConcept  
  public class Produce extends Relation  {  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Produce:create(FlexoConceptInstanceType<PieceOfKnowledge> source, FlexoConceptInstanceType<PieceOfKnowledge> target) {    
      this.init(parameters.source,parameters.target)    
    }    
  
  }  

}
