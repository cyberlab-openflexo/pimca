use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * FML-controlled diagram representing a PimCA model
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/pimca/PimCA.fml/PimCADiagram.fml")
public class PimCADiagram {

  public Diagram diagram;
  public PimCAModel model;

  @CreationScheme  
  PimCADiagram:init(String diagramName, VirtualModelInstanceType<PimCAModel> model) {  
    diagram = CreateDiagram();    
    model = parameters.model;  
  }  


  @FlexoConcept  
  public class BasicMachineryGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Machinery machinery;  
  
    @DropScheme    
    BasicMachineryGR:dropBasicMachineryGRAtTopLevel(String name, FlexoEnumType<MachineryType> kind) {    
      shape = diagram.AddShape();      
      machinery = Machinery.create(parameters.name,parameters.kind);    
    }    
  
  }  

  @FlexoConcept  
  public class PerformerGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Performer machinery;  
  
    @DropScheme    
    PerformerGR:dropPerformerGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      machinery = Performer.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class NetworkGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public DiagramShape icon;  
    public Network machinery;  
    public DiagramShape label;  
  
    @DropScheme    
    NetworkGR:dropNetworkGRAtTopLevel(String name, FlexoEnumType<NetworkType> networkType) {    
      shape = diagram.AddShape();      
      icon = diagram.AddShape();      
      label = diagram.AddShape();      
      machinery = Network.create(parameters.name,parameters.networkType);    
    }    
  
  }  

  @FlexoConcept  
  public class InterfaceGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public DiagramShape icon;  
    public DiagramShape text;  
    public Interface machinery;  
  
    @DropScheme    
    InterfaceGR:dropInterfaceGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      icon = diagram.AddShape();      
      text = diagram.AddShape();      
      machinery = Interface.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class CustomsGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Customs machinery;  
  
    @DropScheme    
    CustomsGR:dropCustomsGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      machinery = Customs.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class AttackerGR extends MachineryGR  {  
  
    public DiagramShape shape;  
    public Attacker machinery;  
  
    @DropScheme    
    AttackerGR:dropAttackerGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      machinery = Attacker.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class MachineryGR extends ElementGR  {  
  
      
    abstract FlexoConceptInstanceType<Machinery> machinery;  
      
    abstract DiagramShape shape;  
      
    public FlexoConceptInstanceType<Machinery> pieceOfKnowledge = machinery;  
  }  

  @FlexoConcept  
  public class SwapGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Swap relation;  
  
    @LinkScheme    
    SwapGR:createSwapGR() {    
      connector = diagram.AddConnector();      
      relation = Swap.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
  }  

  @FlexoConcept  
  public class RelationGR {  
  
      
    abstract DiagramConnector connector;  
    public ElementGR sourceGR;  
    public ElementGR targetGR;  
      
    abstract FlexoConceptInstanceType<Relation> relation;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Void init(FlexoConceptInstanceType<ElementGR> sourceGR, FlexoConceptInstanceType<ElementGR> targetGR) {    
      sourceGR = parameters.sourceGR;      
      targetGR = parameters.targetGR;    
    }    
  
  }  

  @FlexoConcept  
  public class CheckGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Check relation;  
  
    @LinkScheme    
    CheckGR:createCheckGR() {    
      connector = diagram.AddConnector();      
      relation = Check.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
  }  

  @FlexoConcept  
  public class ControlGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Control relation;  
  
    @LinkScheme    
    ControlGR:createControlGR() {    
      connector = diagram.AddConnector();      
      relation = Control.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
  }  

  @FlexoConcept  
  public class UseGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Use relation;  
  
    @LinkScheme    
    UseGR:createUseGR() {    
      connector = diagram.AddConnector();      
      relation = Use.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
  }  

  @FlexoConcept  
  public class ProduceGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Produce relation;  
  
    @LinkScheme    
    ProduceGR:createProduceGR() {    
      connector = diagram.AddConnector();      
      relation = Produce.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
  }  

  @FlexoConcept  
  public class MaintainGR extends RelationGR  {  
  
    public DiagramConnector connector;  
    public Maintain relation;  
  
    @LinkScheme    
    MaintainGR:createMaintainGR() {    
      connector = diagram.AddConnector();      
      relation = Maintain.create(fromTarget.pieceOfKnowledge,toTarget.pieceOfKnowledge);    
    }    
  
  }  

  @FlexoConcept  
  public class BasicResourceGR extends ResourceGR  {  
  
    public DiagramShape shape;  
    public BasicResource resource;  
  
    @DropScheme    
    BasicResourceGR:dropBasicResourceGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      resource = BasicResource.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class InstructionsGR extends ResourceGR  {  
  
    public DiagramShape shape;  
    public Instructions resource;  
  
    @DropScheme    
    InstructionsGR:dropInstructionsGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      resource = Instructions.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class PassportGR extends ResourceGR  {  
  
    public DiagramShape shape;  
    public Passeport resource;  
  
    @DropScheme    
    PassportGR:dropPassportGRAtTopLevel(String name) {    
      shape = diagram.AddShape();      
      resource = Passeport.create(parameters.name);    
    }    
  
  }  

  @FlexoConcept  
  public class ResourceGR extends ElementGR  {  
  
      
    abstract FlexoConceptInstanceType<Resource> resource;  
      
    abstract DiagramShape shape;  
      
    public FlexoConceptInstanceType<Resource> pieceOfKnowledge = resource;  
  }  

  @FlexoConcept  
  public class ElementGR {  
  
      
    abstract FlexoConceptInstanceType<Machinery> pieceOfKnowledge;  
      
    abstract DiagramShape shape;  
  }  

}
